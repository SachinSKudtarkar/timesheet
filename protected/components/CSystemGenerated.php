<?php
/** ************************************************************
 *  File Name		: CSystemGenerated.php
 *  Class Name		: CSystemGenerated
 *  File Description    : Common class to auto generated stuff.
 *  Author		: Benchmark, 
 *  Created Date	: 21th Feb 2014 11:28:00 AM IST.
 *  Develop By		: Anand Rathi.
* ************************************************************* */
class CSystemGenerated
{

	/**
	* Usage		: Autogenerated password
	* Parameters	: NO Parameters
	*       - $char_length          -   char Length ( Default: 5 )
	*	- $special_char_length	-   special Char Length ( Default: 1 )
	*	- $numbers_length	-   numbers Length ( Default: 0 )
	*	- $shuffle		-   shuffle ( Default False )
	* How to Use    : CSystemGenerated::password();
	* Criteria	: 5 char + 1 special char
	**/	
	public static function password( $char_length = 5, $special_char_length = 1, $numbers_length = 0, $shuffle	= false )
	{	
                $numbers 		=	"1234567890";
		$charactor		=	"abcdefghijklmnopqrstuwxyzABCDEFGHIJKLMNOPQRSTUWXYZ";
		$special_characters	=	"!@#$";
		
		// Get random Character/s
		$password 	=	substr( str_shuffle( $charactor ), 0, $char_length );
		// Get random number/s
		$password 	.=	substr( str_shuffle( $numbers ), 0, $numbers_length );
		// Get random Special Character/s
		$password 	.=	substr( str_shuffle( $special_characters ), 0, $special_char_length );
		// Return generated password depends on shuffle
		return $shuffle ? str_shuffle( $password ) : $password;
	}
	
	/**
	* Usage		: Autogenerated password by prefix + string1 + string2
	* Parameters	:
	*       - $prefix           -	prefix ( Compulsory )
	*	- $string1|length   -	String 1|character Length ( Compulsory )
	*	- $string2|length   -	String 2|character Length ( Compulsory )
	*	- $min_length       -	min length of string ( Default is 6 )		
	*	- $max_length       -	max length of string ( Default is 20 )	
	* How to Use	:	CSystemGenerated::username( $prefix, $string1, $string2, $min_length, $max_length );
	* Criteria	:	"( 3 char of user type in Capital letter like 'LWF' )" + [0-9] chars of string1 + [0-9] Char of string2.;
	**/
	public static function username( $prefix, $string1, $string2, $min_length = 6, $max_length = 20 )
	{
	
		// explode string & its length from string 1
		$string1	= explode( '|', $string1 );
		$string1_length	= ( count( $string1 ) > 1 ) ? $string1[1] : 5;
		
		// Remove Special Characters from string 1
		$string1	= preg_replace( '/[^A-Za-z0-9]/', '', $string1[0] );
		
		// explode string & its length from string 2
		$string2	= explode( '|', $string2 );
		$string2_length	= ( count( $string2 ) > 1 ) ? $string2[1] : 5;
		
		// Remove Special Characters from string 2
		$string2	= preg_replace( '/[^A-Za-z0-9]/', '', $string2[0] );
				
		// First Attempt to check availability
		$_prefix 	= substr( strtolower( $prefix ), 0, 3 );
		$_string1 	= trim( substr( strtolower( $string1 ), 0, $string1_length ) );
		$_string2	= trim( substr( strtolower( $string2 ), 0, $string2_length ) );
		
		// Try for availability 
		$username       = $_prefix . $_string1 . $_string2;
		$username       = self::getMinMaxLength( $username, $min_length, $max_length );
		$is_available   = self::isUsernameAvailable( $username );
		
		if( $is_available )
		{
			// Available on first attempt
			return $username;
		}else{
			// Second Attempt
			if( strlen( $_string1 ) > 5 )
			{
				// Try to put sixth char of first name
				$_string1   = trim( substr( strtolower( $string1 ), 0, ( $string1_length + 1 ) ) );
			}else{
				// Try to put sixth char of email
				$_string2   = trim( substr( strtolower( $string2 ), 0, ( $string2_length + 1 ) ) );
			}
			
			// Try for availability 
			$username       = $_prefix . $_string1 . $_string2;
			$username       = self::getMinMaxLength( $username, $min_length, $max_length );
			$is_available   = self::isUsernameAvailable( $username );
			
			if( $is_available ){
				// Available on second attempt
				return $username;
			}else{
				// Last Attempt
				$initial_number = 0;
				// Loop till username will available to us
				while( !$is_available )
				{
					// Try for availability 
					$username       = $_prefix . $_string1 . $_string2 .$initial_number;
					$username       = self::getMinMaxLength( $username, $min_length, $max_length );
					$is_available   = self::isUsernameAvailable( $username );
					// Next Attempt
					$initial_number++; 
				}
				return $username;
			}
		}
	}
	
	/**
	* Usage		: To find username availability
	* Parameters    :
	*       - $username -   username( Compulsory )
	* How to Use    : CSystemGenerated::isUsernameAvailable( $username );
	**/
	public static function isUsernameAvailable( $username  )
	{
		$is_user_exists = User::model()->exists( 'username = :username', array( ":username"=> $username ) );
		return $is_user_exists ? false : true;
	}
	
	/**
	* Usage		: To make proper length of password 
	* Parameters	:
	*       - $string	-   string( Compulsory )
	*	- $min_length	-   min lenght( Compulsory )
	*	- $max_length	-   max lenght( Compulsory )
	* How to Use	: CSystemGenerated::getMinMaxLength( $string, $min_length, $max_length );
	**/
	public static function getMinMaxLength( $string, $min_length, $max_length  )
	{
		if( strlen( $string ) < $min_length )
		{
			// to get exact string length
			$lessStrings	=	$min_length - strlen( $string );
			for( $num = 1 ; $num <= $lessStrings; $num++ )
				$string = $string . $num;
		}elseif( strlen( $string ) > $max_length ){
			// this is an exceptional case to make max length
			$exceed = strlen( $string ) - $max_length;
			$string	= substr( $string, 0, ( -1 * ( $exceed + 5 ) ) );
			$string = $string . self::password(5, 0, 0, true );
		}
		return $string;
	}
        
 	/**
	* Usage		: To Get system messages by key
	* Parameters	:
	*       - $message_key  -   string( Compulsory )
	* How to Use    : CSystemGenerated::setMessage( $string, $message_key, $message );
	**/       
        public static function getMessage($message_key )
	{
            // Get message from message master table
            $get_message = MessageMaster::model()->findByAttributes( array( 'message_key'=>$message_key ) );
            // Return message if have any 
            return ( !empty( $get_message ) ) ? $get_message->message : false;

	}
        
	/**
	* Usage		: To Set system messages by key
	* Parameters    :
	*       - $message_key  -   string( Compulsory )
	*	- $message_type -   message type( default : null )
	*	- $message      -   custom message ( default : null )
	* How to Use    : CSystemGenerated::setMessage( $message_key, $message_type = null, $message = null );
	**/       
        public static function setMessage($message_key, $message_type = null, $message = null )
	{
            $get_message = MessageMaster::model()->findByAttributes( array( 'message_key'=>$message_key ) );
            if( !empty( $get_message ) )
            {
                $message_type  =   ( $message_type == null ) ? $get_message->message_type : $message_type;    
                $message       =   ( $message == null ) ? $get_message->message : $message;
                // Check type of message
                switch( $message_type )
                {
                    // Set success message
                    case 'success':
                        CHelper::setFlashSuccess($message);
                        break;
                     // Set Error message
                    case 'error':
                        CHelper::setFlashError($message);
                        break;
                    // Set notice message
                    case 'notice':
                        CHelper::setFlashNotice($message); 
                        break;
                    /* Add your messages as per the requirement here by creating the new case */
                    default :
                    break;
                }
            }else{
                // return false on message not found
                return false;
            }
	}
        
  	/**
	* Usage         : Check is trainer or not
	* Parameters    :
	*       - $user_id -    user_id ( Compulsory )
	* How to Use    : CSystemGenerated::isTrainer( $user_id );
	**/        
        function isTrainer( $user_id )
        {
            // Check is current user is trainer
            $is_trainer = UserAccess::model()->countByAttributes(
                array(
                    'user_id'=> $user_id,
                    'access_type'=> 'TR',
                    'is_deleted'=> 0,
                    'lawfirm_id'=> 0,                )
            );
            return $is_trainer ? true : false;
        }
   	/**
	* Usage         : Check is Sub Admin or not
	* Parameters    :
	*       - $user_id -    user_id ( Compulsory )
	* How to Use    : CSystemGenerated::isSubAdmin( $user_id );
	**/        
        function isSubAdmin( $user_id )
        {
            // Check is current user is trainer
            $is_sub_admin = UserAccess::model()->countByAttributes(
                array(
                    'user_id'=> $user_id,
                    'access_type'=> 'SA',
                    'is_deleted'=> 0,
                    )
            );
            return $is_sub_admin ? true : false;
        } 
        
        /**
	* Usage         : Check is trainer or not
	* Parameters    :
	*       - $user_id -    user_id ( Compulsory )
	* How to Use    : CSystemGenerated::isTrainer( $user_id );
	**/        
        function isLawfirmAdmin( $user_id )
        {
            // Check is current user is trainer
            $is_trainer = UserAccess::model()->countByAttributes(
                array(
                    'user_id'=> $user_id,
                    'access_type'=> 'LFA',
                    'is_deleted'=> 0,
                    'lawfirm_id'=> 0,                )
            );
            return $is_trainer ? true : false;
        }
   	/**
	* Usage         : Check is Sub Admin or not
	* Parameters    :
	*       - $user_id -    user_id ( Compulsory )
	* How to Use    : CSystemGenerated::isSubAdmin( $user_id );
	**/        
        function isLawfirmSubAdmin( $user_id )
        {
            // Check is current user is trainer
            $is_sub_admin = UserAccess::model()->countByAttributes(
                array(
                    'user_id'=> $user_id,
                    'access_type'=> 'LFSA',
                    'is_deleted'=> 0,
                    )
            );
            return $is_sub_admin ? true : false;
        } 
  	/**
	* Usage		: Check is Superadmin or not
	* Parameters	:
	*       - $user_id  -   user_id ( Compulsory )
	* How to Use    : CSystemGenerated::isSuperAdmin( $user_id );
	**/        
        function isSuperAdmin( $user_id )
        {
            $is_superadmin = UserAccess::model()->countByAttributes(
                array(
                    'user_id'=> $user_id,
                    'access_type'=> 'A'
                )
            );
            return $is_superadmin ? true : false;
        }
        
  	/**
	* Usage		: get law firms of user
	* Parameters	:
	*       - $user_id  -   user_id ( Compulsory )
	* How to Use    : CSystemGenerated::getLawfirmsByUser( $user_id );
	**/        
        function getLawfirmsByUser( $user_id )
        {
            //Set criria to get lawfirm list
            $criteria  = new CDbCriteria();
            $criteria->select   = 't.id, t.firm_name';
            $criteria->join     = 'left JOIN tbl_user_access ua ON (t.id = ua.lawfirm_id) ';
            // Set conditions on that
            $criteria->addCondition( 'ua.user_id ='.$user_id );
            $criteria->addCondition( 'ua.lawfirm_id != 0' );
            $criteria->addCondition( 'ua.is_deleted = 0' );
            $criteria->addCondition( 't.is_active = 1' );
            $criteria->addCondition( 't.is_deleted = 0' );
            // make it list array
            return  CHtml::listData(LawfirmDetail::model()->findAll($criteria),'id','firm_name');
        }        
        
   	/**
	* Usage         : Get all lawfirm access
	* Parameters	:
	*	- no parameters
	* How to Use    : CSystemGenerated::getLawFirmAccessRights();
	**/  
        public static function getLawFirmAccessRights()
        {
            // Get State Access Query
             $state_access = Yii::app()->db->createCommand()
                ->select("p.short_key,sm.state_name_short")
                ->from('tbl_form_master p')
                ->join('tbl_form_master c', 'c.parent_id=p.id AND c.is_active=1')
                ->join('tbl_state_master sm', 'c.state_id=sm.state_id')
                ->where('c.parent_id>0 AND c.state_id NOT IN (0,51)')
                ->group('c.parent_id, c.state_id')       
                ->getText();
            // Get Union with Faderal Querys
           $law_firm_access = Yii::app()->db->createCommand()
                ->union($state_access)
                ->select("p.short_key,p.state_id as state_name_short")
                ->from('tbl_form_master p')
                ->where("p.parent_id=36 OR p.short_key='PF' AND p.is_active=1")     
                ->queryAll();
           $data =  array();
           // Get state form access
           foreach($law_firm_access as $val)
           {
               if( $val['state_name_short'] == '0' )
               {
                   $access_type = 'faderal';
                   $state_name  = "US";
               }
               else 
               {
                   $state_name  = $val['state_name_short'];
                   $access_type = 'state';
               }
              $data[$access_type][$state_name][] = $val['short_key'];
           }
            return $data;
        }
     	/**
	* Usage         : Get lawfirm stats
	* Parameters	:
	*	- no parameters
	* How to Use    : CSystemGenerated::getLawFirmStats();
	**/        
        public static function getLawFirmStats( $lawfrim_id ){
//             $law_firm_stats = Yii::app()->db->createCommand()
//                ->from('view_lawfirm_info')
//                ->where("lawfirm_id=".$lawfrim_id)     
//                ->queryRow();
//             return $law_firm_stats;
            $sql = "SELECT 
                        SUM(licenced) as licenced_cnt,
                        SUM(view_only) as view_only_cnt,
                        SUM(outside_user) as outside_users_cnt,
                        SUM(total_estate) as total_estate_cnt,
                        SUM(total_trust) as total_trust_cnt,
                        SUM(trainers) as trainers_cnt
                    FROM (
                        SELECT 
                            SUM(IF(ua.lawfirm_id=u.lawfirm_id AND ua.is_paid=1 AND ua.access_type='LFE',1,0)) as licenced,
                            SUM(IF(ua.lawfirm_id=u.lawfirm_id AND ua.is_paid=0 AND ua.access_type='LFE',1,0)) as view_only,
                            SUM(IF(outua.lawfirm_id!=u.lawfirm_id AND outua.access_type='LFE',1,0)) as outside_user,
                            0 as total_estate,
                            0 as total_trust,
                            SUM(IF(ua.access_type='TR',1,0)) as trainers
                        FROM 
                            tbl_user_access ua
                        INNER JOIN 
                            tbl_user u ON ua.user_id=u.user_id AND u.is_active=1 AND u.is_deleted=0
                        LEFT OUTER JOIN 
                        (
                                SELECT * FROM 
                                tbl_user_access outua WHERE access_type='LFE' AND outua.is_deleted=0 AND lawfirm_id=".$lawfrim_id." AND entity_id>0
                                GROUP BY user_id
                        ) as outua ON ua.user_id=outua.user_id AND u.lawfirm_id != outua.lawfirm_id 
                        AND outua.entity_id>0 AND outua.access_type='LFE' AND outua.is_deleted=0
                        WHERE 
                            ua.access_type IN ('LFE','TR') AND ua.lawfirm_id=".$lawfrim_id." AND ua.entity_id=0 AND ua.is_deleted=0
                    UNION
                        SELECT
                        0,0,0, 
                        SUM(IF(ent.entity_type='Estate',1,0)) as total_estate,
                        SUM(IF(ent.entity_type='TRUST',1,0)) as total_trust,
                        0 as trainers
                    FROM 
                        tbl_entity ent 
                    WHERE 
                        ent.lawfirm_id=".$lawfrim_id.") as firm WHERE 1=1";
            $law_firm_stats = Yii::app()->db->createCommand($sql)
            ->queryRow();
            return ($law_firm_stats);
        }
        
        //checks that is law firm active/deleted or not
        //returns non zero value if lawfirm is active and not deleted
        public function isLawfirmActive( $lawfirm_id )
        {
            $criteria   = new CDbCriteria(); 
            $criteria->condition = ' id="'.$lawfirm_id.'" AND 
            is_deleted = 0 AND is_active= 1 ' ;						
            return LawfirmDetail::model()->count($criteria);
            
        }
        #  Function:    getAccessRightsOfActiveUser()
        // Parameter:   $login_user_id, $lawfirm_id, $access_type   
        // Description: This function is used if the user wants the access rights of particular user for particular lawfirms
        //              It returs the count with condition ie is user is active and is user is deleted . Its also returns the access_rights for the same
        // Created by:  Rakesh & Shailesh
        // Date:        9-april-2014            
        #
       
        public static function getAccessRightsOfActiveUser( $login_user_id, $lawfirm_id, $access_type)
        {
             //Fetch the access rights of the TR For the selected law firm
            // ##########           Query
            // SELECT * FROM `tbl_user_access` `t` inner join tbl_user_access t1 on t.user_id=t1.user_id and t.access_type=t1.access_type WHERE
            //  t.lawfirm_id=19 AND t.is_deleted = 0 AND t.user_id= 4 AND t.access_type ="TR" and t1.lawfirm_id=0 and t1.is_deleted=0 
            ############
            $criteria   = new CDbCriteria(); 
            $criteria->select="t.access_rights, t.id  ";//
            $criteria->join =   "inner join tbl_user_access t1 on t.user_id = t1.user_id and t.access_type = t1.access_type";
            $criteria->condition = ' t.lawfirm_id="'.$lawfirm_id.'" AND 
            t.is_deleted = 0 AND t.user_id= "'.$login_user_id.'" AND t.access_type ="'.$access_type.'" ' ;
            $criteria->addCondition('t1.lawfirm_id = 0');
            $criteria->addCondition('t1.is_deleted = 0');
            $model = UserAccess::model()->findAll($criteria);
            $count_user_access= UserAccess::model()->count($criteria);
            if( $count_user_access  )
            {
                $response   = array('count'=>$count_user_access, 'access_rights'=>unserialize($model[0]['access_rights']), 'access_id'=>$model[0]['id']);
                return $response;
            }
            else
            {
                return  $response   = array('count'=>$count_user_access);
            }
            
        }
         #  Function:   setAccessRightsOfActiveUser()
        // Parameter:   $login_user_id, $lawfirm_id, $access_type   
        // Description: This function  calls the getAccessRightsOfActiveUser() and changeSessionAccessType.
        //              So here, we are getiing the access rights and update the it in session.
        // Created by:  Rakesh & Shailesh
        // Date:        9-april-2014            
        #
        public static function setAccessRightsOfActiveUser( $login_user_id, $lawfirm_id, $access_type)
        {
            $response = self::getAccessRightsOfActiveUser( $login_user_id, $lawfirm_id, $access_type );
            if($response['count'])
            {
               self::changeSessionAccessType( $access_type, $response['access_rights'], $lawfirm_id, $response['access_id']);
               return true;
            }
            else
            {
                return false;
            }

        }
         #  Function:   changeSessionAccessType()
        // Parameter:   $access_type, $access_rights
        // Description: This function update the session variable. 
        // Case:        Suppose we are selecting any lawfirm from law-firms selection dropdown then Trainer will get 
        //              the access of as per the selected law-firm
        // Created by:  Rakesh & Shailesh
        // Date:        9-april-2014            
        #
        public static function changeSessionAccessType( $access_type, $access_rights, $lawfirm_id, $access_id)
        {
                $session_array  = Yii::app()->session['login'];
                $session_array['access_type'] = $access_type;
                $session_array['access_rights'] = $access_rights;
                $session_array['access_id'] = $access_id;
                $session_array['law_firm_id'] = $lawfirm_id;
                Yii::app()->session['login'] = $session_array;
                 
        }
        public static function switchLawFirmUser($lawfirm,$modulename)
        {
            if(!in_array($modulename , array('estate','lawfirm','site')))
                return;
            $login_user_id  = Yii::app()->session['login']['user_id'];
            switch($modulename)
            {
                case 'estate':
                    $user_type = "'LFE'";
                    break;
                case 'lawfirm':
                    $user_type = "'LFA','LFSA'";
                    break;
                default:
                  $user_type="";
            }
            $user = Yii::app()->db->createCommand()
                    ->select("
                        if( tua.lawfirm_id = tu.lawfirm_id, 0 , 1 ) as is_outside,  
                        tld.id,tu.lawfirm_id,tu.user_id, 
                        tu.email, tu.password,tua.id,tua.access_type,tua.access_rights,tua.lawfirm_id,
                        tld.access_rights as lawfirm_access_rights,tld.login_url_key,
                        (tld.free_trial_days - DATEDIFF(now(),tld.activation_date)) as free_trial_days,
                        (tldo.free_trial_days - DATEDIFF(now(),tldo.activation_date)) as free_trial_days_own,
                        IF(tld.login_url_key='".$lawfirm."' AND tua.lawfirm_id != tu.lawfirm_id,4,IF(tua.lawfirm_id = tu.lawfirm_id,IF(tua.access_type='LFE',2,IF(tldo.free_trial_days - DATEDIFF(now(),tldo.activation_date)<=0,3,1)),0)) as order_by")
                    ->from('tbl_user tu')
                    
                    ->join('tbl_user_access tua', 'tu.user_id=tua.user_id AND tua.is_deleted=0 AND tua.lawfirm_id>0 AND tua.entity_id=0')
                    ->join('tbl_lawfirm_detail tld','tld.id=tua.lawfirm_id AND tld.is_active=1 AND tld.is_deleted=0')                     
                    ->join('tbl_lawfirm_detail tldo', 'tldo.id = tu.lawfirm_id AND tldo.is_active=1 AND tldo.is_deleted=0')
                    ->where('tu.user_id=:user_id AND tu.is_deleted=:is_deleted AND tu.is_active=:is_active AND tua.access_type in ('.$user_type.')', array(':user_id'=>$login_user_id,':is_deleted'=>0,':is_active'=>1))
                    ->order('order_by DESC')
                    ->limit(1)
                    ->queryAll();
//            echo "<pre>";
//          print_r($user); die;
//            $user = Yii::app()->db->createCommand()
//                    ->select('tld.id,tu.lawfirm_id,tu.user_id, tu.email, tu.password,tua.id,tua.access_type,tua.access_rights,tua.lawfirm_id,tld.access_rights as lawfirm_access_rights,tld.login_url_key,(free_trial_days - DATEDIFF(now(),tld.activation_date)) as free_trial_days')
//                    ->from('tbl_user tu')
//                    ->join('tbl_user_access tua', 'tu.user_id=tua.user_id AND tua.is_deleted=0 AND tua.lawfirm_id>0 AND tua.entity_id=0')
//                    ->join('tbl_lawfirm_detail tld','(tld.id = tu.lawfirm_id OR tld.id=tua.lawfirm_id) AND tld.is_active=1 AND tld.is_deleted=0 AND tld.login_url_key="'.$lawfirm.'"')
//                    ->where('tu.user_id=:user_id AND tu.is_deleted=:is_deleted AND tu.is_active=:is_active AND tua.access_type in ('.$user_type.')', array(':user_id'=>$login_user_id,':is_deleted'=>0,':is_active'=>1))
//                    ->order('tua.access_type ASC')       
//                    ->queryAll();
            #----------------------
            # Default Time log Disabled for All Users
            #----------------------
           $is_time_log_enabled = 0;
           if(count($user) == 0)
           {
               // Not a valid User/ or not access redirect on default
           }
           else 
           { 
               if($user[0]['access_type'] == 'LFA' || $user[0]['access_type'] == 'LFSA' || $user[0]['access_type'] == 'LFE')
               {
                    #----------------------------------
                    # Checking If Trial period Remaing
                    # Lawfirm User can have active session
                    #---------------------------------
                    if($user[0]['free_trial_days'] >= 0 && $user[0]['free_trial_days_own'] > 0)
                    {
                        Yii::app()->user->setState('is_lawfirm_expired',0);
                        if($user[0]['id'] == $user[0]['lawfirm_id'])
                        {
                            $user[0]['access_rights'] = unserialize($user[0]['lawfirm_access_rights']);

                        }
                        else 
                        {
                            $user[0]['access_rights'] = unserialize($user[0]['access_rights']);
                        } 
                    }
                    else
                    {
                        #------------------------------
                        # If Lawfirm Expired and Access LFE
                        # It will return false with Message.
                        #-----------------------------
                        if($user[0]['access_type'] == 'LFE')
                        {
                            CSystemGenerated::setMessage('LAWFIRM_TEMPORARILY_INACT','notice',null); 
                            return;
                        }
                        Yii::app()->user->setState('is_lawfirm_expired',1);
                        $user[0]['access_rights'] = array();
                    }
                    $defaultUrl = 'lawfirm';
                    if($user[0]['access_type'] == 'LFE')
                    {
                        
                        #----------------------
                        # Default Time log Enable for All LFE
                        #----------------------
                        $is_time_log_enabled = 1;
                        $defaultUrl = 'estate';
                    }
                    Yii::app()->user->setState('defaultModule',$defaultUrl);
                    Yii::app()->user->setState('redirectLawFirm', '//'.$user[0]['login_url_key'].'/'.$defaultUrl);
                    Yii::app()->user->setState('defaultLawfirm', $user[0]['login_url_key']);
               }
               $data   = array(
                        'user_id'       => $user[0]['user_id'],
                        'email'         => $user[0]['email'],
                        'access_type'   => $user[0]['access_type'],
                        'access_rights' => $user[0]['access_rights'],
                        'access_id'     => $user[0]['id'],
                        'lawfirm_id'    => $user[0]['lawfirm_id'],
                        'is_outside'    => $user[0]['is_outside'],
                      ) ;
           
                // set session for user
                Yii::app()->session['login']  = $data ;
                 #------------------------------------------
                # Set Time Log for LFE Only
                #------------------------------------------
                if($is_time_log_enabled)
                {
                    $login_user_access_id   = Yii::app()->session['login']['access_id'];
                    $start_time = new CDbExpression('NOW()');
                    //Create the entry in the time log table
                    CLog::setTimeLog($user[0]['user_id'], $login_user_access_id, $user[0]['lawfirm_id'], $start_time, $start_time);
                    $time_log_id    =   Yii::app()->db->getLastInsertID();
                    $session_array  = Yii::app()->session['login'];
                    $session_array['timelogid']    = $time_log_id;
                    Yii::app()->session['login'] = $session_array;
                }
           }
        }
    function isViewOnly( $entity_id )
    {
        
        $login = Yii::app()->session['login'];
        $lawfirm_id =  $login['lawfirm_id'];
        $user_id =  $login['user_id'];
        $user_access = UserAccess::model()->findByAttributes( array( 'lawfirm_id'=>$lawfirm_id, 'access_type'=>'LFE', 'user_id'=>$user_id, 'entity_id'=>( $login['is_outside'] == 1 ) ? $entity_id : 0 ) );
        return ( $user_access->is_paid != 1 );
        
    }
    function getLawfirmsListByUser( $user_id )
    {
        //Set criria to get lawfirm list
        $criteria  = new CDbCriteria();
        $criteria->select   = "CONCAT('/',ld.login_url_key,'/',IF(t.access_type='LFE','estate','lawfirm')) as url, concat(IF(t.access_type='LFE',ld.firm_name,'Admin')) as label,IF(t.access_type='LFE',0,1) as custome_order";
        // $criteria->select   = "ld.login_url_key,t.user_id";
        $criteria->join     = 'inner JOIN tbl_user u ON (u.user_id=t.user_id AND u.is_active = 0 AND u.is_deleted=0) ';
        $criteria->join     = 'inner JOIN tbl_lawfirm_detail ld ON (ld.id=t.lawfirm_id AND ld.is_active=1 AND ld.is_deleted=0) ';
        // Set conditions on that
        $criteria->addCondition( 't.user_id ='.$user_id );
        $criteria->addInCondition( 't.access_type', array('LFA','LFSA','LFE'));
        $criteria->addCondition( 't.is_deleted = 0' );
        $criteria->addCondition( 't.entity_id = 0' );
        $criteria->order = 'custome_order DESC';
        // make it list array
        return  CHtml::listData(UserAccess::model()->findAll($criteria),'url','label');
    }
    
    /**
	* Usage		: To Get system messages And type by key
	* Parameters	:
	*       - $message_key  -   string( Compulsory )
	* How to Use    : CSystemGenerated::getMessage($message_key);
	**/       
        public static function getMessageAndType($message_key )
	{
            // Get message from message master table
            $get_message = MessageMaster::model()->findByAttributes( array( 'message_key'=>$message_key ) );
            
            $message['message']=$get_message->message;
            $message['type']=$get_message->message_type;
            
            // Return message and type if have any 
            return ( !empty( $get_message ) ) ? $message : false;

	}
        
        /**
	* Usage		: checking developer mode
        * Parameters    
        *      $type : - 'prince, nodejs, is_live'
	* How to Use    : CSystemGenerated::getGeneralSetting( $type );
	**/        
        public static function getGeneralSetting( $type )
        {
            return isset ( Yii::app()->params['generalSettings'][$type] ) ? Yii::app()->params['generalSettings'][$type] : '';
        }
    
        /**
	* Usage		: check having entity access
	* How to Use    : CSystemGenerated::hasFormAccess();
	**/          
        public static function hasFormAccess()
        {
            $model_form_name = ucfirst( Yii::app()->controller->id );
            $form_table = $model_form_name::model()->tableSchema->name;
            $form_entry = Yii::app()->request->getQuery('id');
            $login_user_id  = Yii::app()->session['login']['user_id'];
            $lawfirm_id  = Yii::app()->session['login']['lawfirm_id'];
            $criteria = new CDbCriteria();
            $criteria->select = "if( ua.lawfirm_id = t.lawfirm_id, 'own' , 'outside' ) as user_from,  
                                 if( ua.is_paid = 1, 'license' , 'viewonly' ) as user_type,
                                 ua.user_id,  
                                 tbl_name.entity_id,
                                 ua.entity_id,
                                 ua.lawfirm_id as lawfirm
                                ";
            $criteria->join      = "left outer JOIN tbl_user_access ua on( t.user_id = ua.user_id )";
            $criteria->join      .= " left JOIN ".$form_table." tbl_name on( tbl_name.entity_id = ua.entity_id AND tbl_name.id = ".$form_entry." )";
            $criteria->condition = "ua.lawfirm_id = ".$lawfirm_id." AND ua.access_type = 'LFE' AND ua.user_id = ".$login_user_id." AND ua.is_deleted = 0";
            //$criteria->condition .= " AND if( if( ua.lawfirm_id = t.lawfirm_id, 0 , 1 ), tbl_name.entity_id IS NOT NULL, 1)";
            $criteria->having    = " if( if( user_from = 'own', 0 , 1 ), tbl_name.entity_id IS NOT NULL, 1 )";
            $form_access = User::model()->find($criteria);
            // this for license user
            if( count( $form_access ) && $form_access->user_type == 'license') //display the form if license
            {
                // own lawfirm user
                if( $form_access->user_from == 'own' ){
                    return true;
                }else{
                    // outside lawfirm user
                    return ( count( $form_access ) ) ? true : false;
                }
            }
            else if( count( $form_access ) && $form_access->user_type == 'viewonly' )  //redirect to preview page on view only users
            {
                // If someone access to main form then Viewonly user will redirect to preview page
                if( Yii::app()->controller->action->id == 'pdf' ) return true;
                if( Yii::app()->request->getQuery('preview') != 'preview' )
                    Yii::app()->request->redirect(Yii::app()->request->url.'/preview');
                else if( Yii::app()->request->getQuery('preview') == 'preview' )
                    return true;
            }else{
                // if user have no access then
                return false;                
            }
                
        }
}
?>